// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// Defines values for DecryptRequestAlgorithm.
const (
	Aes DecryptRequestAlgorithm = "aes"
)

// DecryptRequest defines model for DecryptRequest.
type DecryptRequest struct {
	// Algorithm encryption algorithm
	Algorithm *DecryptRequestAlgorithm `json:"algorithm,omitempty"`

	// Cipherkey encryption key
	Cipherkey *string `json:"cipherkey,omitempty"`

	// Ciphertext encrypted text
	Ciphertext *string `json:"ciphertext,omitempty"`
}

// DecryptRequestAlgorithm encryption algorithm
type DecryptRequestAlgorithm string

// DecryptedMessage defines model for DecryptedMessage.
type DecryptedMessage struct {
	// Message decrypted message
	Message *string `json:"message,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message error message
	Message *string `json:"message,omitempty"`
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	Algorithms *[]string `json:"algorithms,omitempty"`
}

// PostApiV1DecryptJSONRequestBody defines body for PostApiV1Decrypt for application/json ContentType.
type PostApiV1DecryptJSONRequestBody = DecryptRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Decrypt a cipher text
	// (POST /api/v1/decrypt)
	PostApiV1Decrypt(ctx echo.Context) error
	// List all supported enryption algorithms
	// (GET /api/v1/list)
	GetApiV1List(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1Decrypt converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Decrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Decrypt(ctx)
	return err
}

// GetApiV1List converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1List(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1List(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/decrypt", wrapper.PostApiV1Decrypt)
	router.GET(baseURL+"/api/v1/list", wrapper.GetApiV1List)

}
